# -*- coding: utf-8 -*-
"""CGIAssignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11DFgJqz0Ze9N2kjsye_oSAswa5YFe0Zj
"""

import matplotlib.pyplot as plt

def visual_show(coordinates, coordinate1, coordinate2):
    # Extract x and y coordinates from list
    x_coord = [coord[0] for coord in coordinates]
    y_coord = [coord[1] for coord in coordinates]
    plt.plot(x_coord, y_coord, marker='o', color='green')
    plt.xlabel("X-axis")
    plt.ylabel("Y-axis")
    plt.title(f"Line Between {coordinate1} and {coordinate2}")
    plt.grid(True)
    x = [coordinate1[0], coordinate2[0]]
    y = [coordinate1[1], coordinate2[1]]
    plt.plot(x, y, marker='o', color='blue')
    plt.show()

def slope_less_than_one(coordinate1, coordinate2):
    print('Coordinates are: ', coordinate1, coordinate2)
    print('\nSlope is lesser than one\n')
    coordinates = []
    decisionVariables = []
    x1, y1 = coordinate1
    x2, y2 = coordinate2
    x, y = x1, y1
    dy = y2 - y1
    dx = x2 - x1
    p = 2 * dy - dx

    while x <= x2:
        coordinates.append((x, y))
        decisionVariables.append(p)
        x += 1
        if p < 0:
            p = p + 2 * dy
        else:
            p = p + 2 * dy - 2 * dx
            y += 1
    print("Intermediate Coordinates are: ", coordinates)

    print("\nDecision Variables are: ", decisionVariables)
    print('\n')

    visual_show(coordinates, coordinate1, coordinate2)

def slope_greater_than_one(coordinate1, coordinate2):
    print('Coordinates are: ', coordinate1, coordinate2)
    print('\nSlope is greater or equal one\n')
    coordinates = []
    decisionVariables = []
    x1, y1 = coordinate1
    x2, y2 = coordinate2
    x, y = x1, y1
    dy = y2 - y1
    dx = x2 - x1
    p = 2 * dx - dy

    while y <= y2:
        coordinates.append((x, y))
        decisionVariables.append(p)
        y += 1
        if p < 0:
            p = p + 2 * dx
        else:
            p = p + 2 * dx - 2 * dy
            x += 1
    print("Intermediate Coordinates are: ", coordinates)
    print('\n')
    print("Decision Variables are: ", decisionVariables)
    print('\n')
    visual_show(coordinates, coordinate1, coordinate2)

def bresenham_line(coordinate1, coordinate2):
    x1, y1 = coordinate1
    x2, y2 = coordinate2
    dy = y2 - y1
    dx = x2 - x1
    if dy < dx:
        slope_less_than_one(coordinate1, coordinate2)
    else:
        slope_greater_than_one(coordinate1, coordinate2)

def main():
    print('\nBresenham Line Drawing Algorithm\n')
    print('Case 1 :\n')
    coordinate1 = (1, 1)
    coordinate2 = (8, 4)
    bresenham_line(coordinate1, coordinate2)
    print('\nCase 2 :\n')

    coordinate1 = (1, 1)
    coordinate2 = (4, 8)
    bresenham_line(coordinate1, coordinate2)

if __name__ == "__main__":
    main()